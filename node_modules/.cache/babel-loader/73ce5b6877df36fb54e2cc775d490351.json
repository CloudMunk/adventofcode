{"remainingRequest":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/babel-loader/lib/index.js!/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/src/views/Dayfour.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/src/views/Dayfour.vue","mtime":1576801711949},{"path":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/cache-loader/dist/cjs.js","mtime":1572726259477},{"path":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/babel-loader/lib/index.js","mtime":1558734726536},{"path":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/cache-loader/dist/cjs.js","mtime":1572726259477},{"path":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/vue-loader/lib/index.js","mtime":1572726259852}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWludC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwZWF0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0LmpzIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KZXhwb3J0IGRlZmF1bHQgewogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBzb2x1dGlvbjogMAogICAgfTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGNyYWNrVmVudXNDb2RlOiBmdW5jdGlvbiBjcmFja1ZlbnVzQ29kZSgpIHsKICAgICAgdmFyIG1hdGNoaW5nID0gW107CgogICAgICBmb3IgKHZhciBpID0gMTU4MTI2OyBpIDw9IDYyNDU3NDsgaSsrKSB7CiAgICAgICAgdmFyIHN0cmluZ051bSA9IFN0cmluZyhpKTsgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgICAgIHZhciBpc0luY3JlYXNpbmcgPSBmYWxzZTsgLy8gbGV0IGNvbnRhaW5zRG91YmxlID0gZmFsc2U7CgogICAgICAgIHZhciBjb250YWluc1RyaXBsZSA9IHRydWU7IC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN0cmluZ051bS5sZW5ndGg7IGorKykgewogICAgICAgICAgaWYgKGogPiAwKSB7CiAgICAgICAgICAgIC8vIENoZWNrcyBpZiBpbmNyZWFzaW5nCiAgICAgICAgICAgIGlmIChzdHJpbmdOdW1baiAtIDFdIDw9IHN0cmluZ051bVtqXSkgewogICAgICAgICAgICAgIGlzSW5jcmVhc2luZyA9IHRydWU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgaXNJbmNyZWFzaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0gLy8gSWYgYSBwYWlyIGFuZCBub3QgcGFydCBvZiB0aHJlZSBpbiBhIHJvdyBidXQgdGhyZWUgaW4gYSByb3cgaXMgc3RpbGwgb2sgaWYgdGhlcmUgaXMgYSBwYWlyCgoKICAgICAgICAgICAgaWYgKHN0cmluZ051bVtqXSA9PT0gc3RyaW5nTnVtW2ogKyAxXSAmJiBzdHJpbmdOdW1bal0gPT09IHN0cmluZ051bVtqICsgMl0pIGNvbnRhaW5zVHJpcGxlID0gZmFsc2U7IC8vIFRSSUVEOiAxNjA5IDEyMzIgOTAyIDk4MSAxNzMgMCA3MTAgMTQ3MyAxNDE3IDg4MCA5NjQgMTQ2MiAxMTAyIDc5MSAKICAgICAgICAgICAgLy8gU29sdXRpb25zIGZvcm0gb3RoZXJzOiAxNDYyIDExMDIKICAgICAgICAgIH0KICAgICAgICB9IC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKICAgICAgICBpZiAoaXNJbmNyZWFzaW5nICYmIGNvbnRhaW5zVHJpcGxlKSB7CiAgICAgICAgICBtYXRjaGluZy5wdXNoKGkpOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5zb2x1dGlvbiA9IG1hdGNoaW5nLmxlbmd0aDsKICAgICAgfQoKICAgICAgY29uc29sZS5sb2cobWF0Y2hpbmcubGVuZ3RoKTsKICAgIH0sCiAgICBwb3NzaWJsZVNvbHV0aW9uOiBmdW5jdGlvbiBwb3NzaWJsZVNvbHV0aW9uKCkgewogICAgICB2YXIgZGF5NCA9ICIxOTM2NTEtNjI0NTc0IjsKCiAgICAgIHZhciBwYXNzQ291bnQgPSBmdW5jdGlvbiBwYXNzQ291bnQoc3RyKSB7CiAgICAgICAgdmFyIGEgPSBzdHIuc3BsaXQoIi0iKVswXTsKICAgICAgICB2YXIgYiA9IHN0ci5zcGxpdCgiLSIpWzFdOwogICAgICAgIHZhciBjb3VudCA9IDA7CiAgICAgICAgdmFyIGkgPSBhLnRvU3RyaW5nKCk7CiAgICAgICAgdmFyIGo7CiAgICAgICAgdmFyIGs7CgogICAgICAgIHdoaWxlIChpIDwgYikgewogICAgICAgICAgaiA9IDE7CgogICAgICAgICAgd2hpbGUgKGogPCBpLmxlbmd0aCkgewogICAgICAgICAgICBrID0gMTsKCiAgICAgICAgICAgIGlmIChpW2pdIDwgaVtqIC0gMV0pIHsKICAgICAgICAgICAgICB2YXIgbmV4dE51bSA9IGkuc3Vic3RyKDAsIGopLmNvbmNhdChpW2ogLSAxXS5yZXBlYXQoaS5sZW5ndGggLSBqKSk7CiAgICAgICAgICAgICAgaSA9IG5leHROdW07CiAgICAgICAgICAgICAgaiA9IGkubGVuZ3RoOwogICAgICAgICAgICB9IGVsc2UgaWYgKGogPT0gaS5sZW5ndGggLSAxKSB7CiAgICAgICAgICAgICAgd2hpbGUgKGsgPCBpLmxlbmd0aCkgewogICAgICAgICAgICAgICAgaWYgKGlba10gPT0gaVtrIC0gMV0gJiYgaVtrXSAhPSBpW2sgKyAxXSAmJiBpW2tdICE9IGlbayAtIDJdKSB7CiAgICAgICAgICAgICAgICAgIGNvdW50Kys7CiAgICAgICAgICAgICAgICAgIGsgPSBpLmxlbmd0aDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGsrKzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGkgPSAocGFyc2VJbnQoaSkgKyAxKS50b1N0cmluZygpOwogICAgICAgICAgICAgIGorKzsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBqKys7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBjb3VudCAmJiBjb25zb2xlLmxvZyhjb3VudCk7CiAgICAgIH07CgogICAgICBwYXNzQ291bnQoZGF5NCk7CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy5jcmFja1ZlbnVzQ29kZSgpOwogICAgdGhpcy5wb3NzaWJsZVNvbHV0aW9uKCk7CiAgfQp9Ow=="},{"version":3,"sources":["Dayfour.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <h1>--- Day 4: Secure Container ---</h1>\n        <p>\n            You arrive at the Venus fuel depot only to discover it's protected by a password. \n            The Elves had written the password on a sticky note, but someone threw it out.\n        </p>\n        <h4 >However, they do remember a few key facts about the password:</h4>\n        <ul class=\"textDeco\">\n            <li>\n                It is a six-digit number.\n            </li>\n            <li>\n                The value is within the range given in your puzzle input.\n            </li>\n            <li>\n                Two adjacent digits are the same (like 22 in 122345).\n            </li>\n            <li>\n                Going from left to right, the digits never decrease; they only ever,\n                increase or stay the same (like 111123 or 135679).\n            </li>\n        </ul>\n        <p>\n            Other than the range rule, the following are true:\n        </p>\n        <ul class=\"textDeco\" >\n            <li>\n                111111 meets these criteria (double 11, never decreases).\n            </li>\n            <li>\n                223450 does not meet these criteria (decreasing pair of digits 50).\n            </li>\n            <li>\n                123789 does not meet these criteria (no double).\n            </li>\n        </ul>\n        <h3>\n            How many different passwords within the range given in your puzzle input meet these criteria?\n        </h3>\n        <h4>Your puzzle answer was 1665.</h4>\n        <br>\n        <h1>--- Part Two ---</h1>\n        <p>\n            An Elf just remembered one more important detail: the two adjacent matching digits are not \n            part of a larger group of matching digits.\n        </p>\n        <p>\n            An Elf just remembered one more important detail: the two adjacent matching digits are not \n            part of a larger group of matching digits.\n        </p>\n        <p>\n            Given this additional criterion, but still ignoring the range rule, the following are now true:\n        </p>\n        <ul class=\"textDeco\">\n            <li>\n                112233 meets these criteria because the digits never decrease and all repeated digits are exactly two digits long.\n            </li>\n            <li>\n                123444 no longer meets the criteria (the repeated 44 is part of a larger group of 444).\n            </li>\n        </ul>\n        <h2>How many different passwords within the range given in your puzzle input meet all of the criteria?</h2>\n        <h2> {{ solution }} </h2>\n    </div>\n</template>\n\n<script>\n    export default {\n        data: function () {\n            return {\n                solution: 0\n            }\n        },\n        methods: {\n            crackVenusCode () {\n                const matching = [];\n\n                for (let i = 158126; i <= 624574; i++) {\n                const stringNum = String(i);\n                //-------------------------------------------\n                let isIncreasing = false;\n                // let containsDouble = false;\n                let containsTriple = true\n                \n                \n                //-------------------------------------------\n                for (let j = 0; j < stringNum.length; j++) {\n                    if (j > 0) {\n                    // Checks if increasing\n                    if (stringNum[j - 1] <= stringNum[j]) {\n                        isIncreasing = true;\n                    } else {\n                        isIncreasing = false;\n                        break; \n                    }\n                    // If a pair and not part of three in a row but three in a row is still ok if there is a pair\n                    if (stringNum[j] === stringNum[j + 1] && stringNum[j] === stringNum[j + 2])\n                        containsTriple = false\n                    \n                    // TRIED: 1609 1232 902 981 173 0 710 1473 1417 880 964 1462 1102 791 \n                    // Solutions form others: 1462 1102\n                    }\n                }\n                \n                //------------------------------------------\n                if (isIncreasing && containsTriple) {\n                    matching.push(i)\n                }\n                this.solution = matching.length\n                }\n\n                console.log(matching.length);\n\n            },\n            possibleSolution() {\n                const day4 = \"193651-624574\";\n\n                const passCount = (str) => {\n                let a = str.split(\"-\")[0];\n                let b = str.split(\"-\")[1];\n                let count = 0;\n                let i = a.toString();\n                let j;\n                let k;\n                while (i < b) {\n                    j = 1;\n                    while (j < i.length) {\n                    k = 1;\n                    if (i[j] < i[j-1]) {\n                        let nextNum = i.substr(0,j).concat(i[j-1].repeat(i.length-j));\n                        i = nextNum;\n                        j = i.length;\n                    } else if (j == i.length-1) {\n                        while (k < i.length) {\n                        if (i[k] == i[k-1] && i[k] != i[k+1] && i[k] != i[k-2]) {\n                            count++;\n                            k = i.length;\n                        } else {\n                            k++;\n                        }\n                        }\n                        i = (parseInt(i) + 1).toString();\n                        j++;\n                    } else {\n                        j++;\n                    }\n                    }\n                }\n                return count && console.log(count);\n                };\n\n                passCount(day4);\n            }\n        },\n        mounted () {\n            this.crackVenusCode()\n            this.possibleSolution()\n        }\n    }\n</script>\n\n<style scoped>\n.textDeco {\n    list-style-type: none;\n}\n</style>"],"sourceRoot":"src/views"}]}