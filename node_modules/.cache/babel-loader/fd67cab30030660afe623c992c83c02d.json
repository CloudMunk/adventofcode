{"remainingRequest":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/babel-loader/lib/index.js!/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/src/views/Daythree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/src/views/Daythree.vue","mtime":1576283744324},{"path":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/cache-loader/dist/cjs.js","mtime":1572726259477},{"path":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/babel-loader/lib/index.js","mtime":1558734726536},{"path":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/cache-loader/dist/cjs.js","mtime":1572726259477},{"path":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/vue-loader/lib/index.js","mtime":1572726259852}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Daythree.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <h1>--- Day 3: Crossed Wires ---</h1>\n        <p>\n            The gravity assist was successful, and you're well on your way to the Venus refuelling station. \n            During the rush back on Earth, the fuel management system wasn't completely installed, so that's \n            next on the priority list.\n        </p>\n        <p>\n            Opening the front panel reveals a jumble of wires. Specifically, two wires are connected to a \n            central port and extend outward on a grid. You trace the path each wire takes as it leaves the \n            central port, one wire per line of text (your puzzle input).\n        </p>\n        <p>\n            The wires twist and turn, but the two wires occasionally cross paths. To fix the circuit, you \n            need to find the intersection point closest to the central port. Because the wires are on a \n            grid, use the Manhattan distance for this measurement. While the wires do technically cross \n            right at the central port where they both start, this point does not count, nor does a wire \n            count as crossing with itself.\n        </p>\n        <p>\n            For example, if the first wire's path is R8,U5,L5,D3, then starting from the central port (o), \n            it goes right 8, up 5, left 5, and finally down 3:\n        </p>\n        <img src=\"https://i.imgur.com/hwnCbRF.png\" alt=\"fristimg\">\n        <p>\n            Then, if the second wire's path is U7,R6,D4,L4, it goes up 7, right 6, down 4, and left 4:\n        </p>\n        <img src=\"https://i.imgur.com/s7Zl8ZM.png\" alt=\"scndimg\">\n        <p>\n            These wires cross at two locations (marked X), but the lower-left one is closer to the central \n            port: its distance is 3 + 3 = 6.\n        </p>\n        <h3>\n            Here are a few more examples:\n        </h3>\n        <p>\n            <ul >\n                <li>\n                        R75,D30,R83,U83,L12,D49,R71,U7,L72\n                        U62,R66,U55,R34,D71,R55,D58,R83 = distance 159\n                </li>\n                <li>\n                        R98,U47,R26,D63,R33,U87,L62,D20,R33,U53,R51\n                        U98,R91,D20,R16,D67,R40,U7,R15,U6,R7 = distance 135\n                </li>\n            </ul>\n        </p>\n        <h3>\n            What is the Manhattan distance from the central port to the closest intersection?\n        </h3>\n        <h1>Solution(<a href=\"https://adventofcode.com/2019/day/3/input\">input</a>): {{ solution }}</h1>\n        <br>\n        <h1>--- Part Two ---</h1>\n        <p>\n            It turns out that this circuit is very timing-sensitive; you actually need to minimize the \n            signal delay.\n        </p>\n        <p>\n            To do this, calculate the number of steps each wire takes to reach each intersection; \n            choose the intersection where the sum of both wires' steps is lowest. If a wire visits a \n            position on the grid multiple times, use the steps value from the first time it visits that \n            position when calculating the total value of a specific intersection.\n        </p>\n        <p>\n            The number of steps a wire takes is the total number of grid squares the wire has entered to \n            get to that location, including the intersection being considered. Again consider the example \n            from above:\n        </p>\n        <img src=\"\" alt=\"\">\n        <h1>{{ secondSolution }}</h1>\n    </div>\n</template>\n\n<script>\nexport default {\n    data: function () {\n        return {\n           solution: 0,\n           input: 'R1004,D53,L10,U126,R130,U533,R48,D185,L768,U786,L445,U694,L659,D237,R432,U147,R590,U200,R878,D970,L308,D134,R617,U431,L631,D548,L300,D509,R660,U698,L958,U170,R572,U514,R387,D385,L670,D374,R898,U870,L545,D262,L699,D110,R58,D84,R77,D58,L891,U9,R320,D914,L161,D148,L266,D334,R442,D855,R349,D618,R272,U514,R584,D269,R608,U542,L335,U855,L646,D678,R720,U325,L792,U60,L828,D915,L487,D253,L911,U907,R392,D981,R965,D725,R308,D574,L997,D332,L927,D855,R122,D5,L875,D336,L395,U697,R806,U420,R718,D575,L824,U397,L308,D988,L855,U332,R838,U853,L91,U778,R265,U549,L847,D665,L804,D768,L736,D201,L825,U87,L747,D375,L162,U336,R375,U754,R468,U507,R256,D107,L79,U871,L155,D667,L448,D847,L193,U263,R154,U859,R696,D222,R189,D307,R332,U522,L345,D961,L161,U274,L122,U931,L812,D852,R906,D269,R612,D723,L304,U944,R64,D20,R401,D260,L95,U278,R128,U637,L554,D650,L116,D720,R12,D434,R514,U379,L899,D359,R815,D843,L994,U775,R63,D942,R655,D91,L236,U175,L813,D572,R520,U812,L657,D935,L886,D178,R618,U260,R7,D953,L158,D471,R309,D858,R25,U746,R40,U832,L544,D311,R122,D224,L281,D699,R147,D310,R659,D662,L990,U160,L969,D335,L923,U201,R336,D643,R226,D91,R88,U350,L303,U20,L157,U987,L305,U766,R253,D790,R977,U482,R283,U793,R785,D799,L511,D757,L689,D841,L233,U742,L551,D466,R66,U579,L18,U838,R554,D143,L996,U557,L783,D799,R36,D563,L244,U440,L8,D945,L346,D747,L769,U661,L485,U965,L569,U952,R57,U773,L267,U453,R424,U66,R763,U105,R285,D870,L179,U548,L46,U914,L251,U194,L559,U736,R768,D917,R617,D55,R185,D464,L244\\nL1005,D527,R864,D622,R482,D647,R29,U459,R430,D942,R550,D163,L898,U890,L271,D216,L52,U731,R715,U925,L614,U19,R687,D832,L381,U192,L293,D946,L642,D2,L124,U66,R492,U281,R181,U624,R294,U767,R443,U424,R241,D225,R432,D419,L647,U290,L647,D985,L694,D777,L382,D231,R809,D467,L917,D217,R422,U490,L873,D537,R176,U856,L944,D875,L485,D49,R333,D220,L354,U789,R256,D73,R905,U146,R798,D429,R111,D585,L275,D471,R220,D619,L680,U757,R580,U497,L620,U753,R58,U574,L882,U484,R297,D899,L95,D186,R619,D622,R65,U714,L402,U950,R647,D60,L659,U101,L917,D736,L531,U398,R26,U134,R837,U294,R364,D55,R254,D999,R868,U978,R434,U661,R362,D158,L50,D576,L146,D249,L562,D433,R206,D376,L650,U285,L427,D406,L526,D597,R557,U554,L463,D157,L811,U961,R648,D184,L962,U695,R138,U661,L999,U806,L413,U54,L865,U931,L319,U235,L794,D12,L456,D918,L456,U214,L739,D772,R90,D478,R23,D658,R919,D990,L307,D534,L40,D324,L4,U805,L605,U534,R727,U452,R733,D416,L451,U598,R215,D545,L563,D222,L295,D669,R706,U11,R44,D392,L518,D437,L634,U874,L641,U240,L11,D279,L153,U601,L238,U924,L292,D406,L360,D203,R874,D506,R806,U9,R713,D891,L587,U538,L867,D637,R889,U186,R728,D672,R573,U461,R222,D703,R178,U336,L896,D924,L445,D365,L648,U3,L734,U959,R344,U314,R331,D929,L364,D937,L896,D191,R218,U256,L975,D506,R510,D392,R878,U896,L177,U4,R516,D873,R57,D530,R140,D827,L263,U848,L88,U309,L801,U670,R874,D358,L49,D259,L188,U419,R705,D498,R496,U576,R808,D959,L861,U437,L618,D112,R725,D546,R338,U879,R522,U892,R230,D367,R901,D737,L942,D689,R976,D369,R157',\n           intersections: [],\n           secondSolution: 0\n        }\n    },\n    methods: {\n        \n            // const input = this.input\n             parse (line) {\n                const segments = []\n                let position = { x: 0, y: 0 }\n                line\n                    .split(`,`)\n                    .map((tuple) => {\n                        const array = [...tuple]\n                        const letter = array.shift()\n                        const distance = parseInt(array.join``)\n                        const nextPosition = { x: position.x, y: position.y }\n                            switch(letter) {\n                                case 'U':\n                                    nextPosition.y -= distance\n                                    break\n                                case 'D':\n                                    nextPosition.y += distance\n                                    break\n                                case 'R':\n                                    nextPosition.x += distance\n                                    break\n                                case 'L':\n                                    nextPosition.x -= distance\n                                    break\n                            }\n                            segments.push({\n                                from: {\n                                    x: position.x,\n                                    y: position.y\n                                },\n                                to: {\n                                    x: nextPosition.x,\n                                    y: nextPosition.y\n                                },\n                            })\n                            position = nextPosition\n                    })\n                    return segments\n            },\n            // distances (intersections) {\n            //     let distances = intersections\n            //         .filter(p => p.x != 0 || p.y != 0)\n            //         .map(p => Math.abs(p.x) + Math.abs(p.y))\n            //     return Math.min(...distances)\n            // },\n            solve (input) {\n                const wires = input.split(`\\n`).map(wire => this.parse(wire))\n                // console.log(JSON.stringify(wires))\n                \n                let intersections = []\n                let currentSteps1 = 0\n                const manhattan = (point1, point2) => Math.abs(point1.x - point2.x) + Math.abs(point1.y - point2.y)\n\n                wires[0].map((segment1) => {\n                    let currentSteps2 = 0\n                    wires[1].map((segment2) => {\n                        if((segment1.from.x == segment1.to.x) ^ (segment2.from.x == segment2.to.x)) {\n                            const vertical = segment1.from.x == segment1.to.x ? segment1 : segment2\n                            const horizontal = segment1.from.x == segment1.to.x ? segment2 : segment1\n\n                            const minX = Math.min(horizontal.from.x, horizontal.to.x)\n                            const maxX = Math.max(horizontal.from.x, horizontal.to.x)\n\n                            const minY = Math.min(vertical.from.y, vertical.to.y)\n                            const maxY = Math.max(vertical.from.y, vertical.to.y)\n\n                            if(vertical.from.x >= minX && vertical.from.x <= maxX\n                                && horizontal.from.y >= minY && horizontal.from.y <= maxY) {\n                                const i = {\n                                    x: vertical.from.x,\n                                    y: horizontal.from.y,\n                                    steps: currentSteps1 + currentSteps2\n                                };\n                                i.steps += manhattan(segment1.from, i) + manhattan(segment2.from, i) \n                                intersections.push(i)\n                            }\n                        }\n                        currentSteps2 += manhattan(segment2.from, segment2.to)\n                        // console.log(currentSteps2)\n                    })\n                    currentSteps1 += manhattan(segment1.from, segment1.to)\n                    // console.log(currentSteps1)\n                    let distances = intersections\n                    .filter(p => p.x != 0 || p.y != 0)\n                    .map(p => p.steps)\n                        return Math.min(...distances) && (this.secondSolution = Math.min(...distances))\n                }); \n                \n            }\n        \n    },\n    mounted () {\n        //    console.log('This is the answer', this.solve(this.input))\n           this.solution = this.solve(this.input) \n          \n\n        }\n}\n</script>\n\n<style scoped>\n\n</style>"],"sourceRoot":"src/views"}]}