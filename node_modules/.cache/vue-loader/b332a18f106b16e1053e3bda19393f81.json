{"remainingRequest":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/src/views/Daythree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/src/views/Daythree.vue","mtime":1576283744324},{"path":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/cache-loader/dist/cjs.js","mtime":1572726259477},{"path":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/babel-loader/lib/index.js","mtime":1558734726536},{"path":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/cache-loader/dist/cjs.js","mtime":1572726259477},{"path":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/vue-loader/lib/index.js","mtime":1572726259852}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICAgIGRhdGE6IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgIHNvbHV0aW9uOiAwLAogICAgICAgICAgIGlucHV0OiAnUjEwMDQsRDUzLEwxMCxVMTI2LFIxMzAsVTUzMyxSNDgsRDE4NSxMNzY4LFU3ODYsTDQ0NSxVNjk0LEw2NTksRDIzNyxSNDMyLFUxNDcsUjU5MCxVMjAwLFI4NzgsRDk3MCxMMzA4LEQxMzQsUjYxNyxVNDMxLEw2MzEsRDU0OCxMMzAwLEQ1MDksUjY2MCxVNjk4LEw5NTgsVTE3MCxSNTcyLFU1MTQsUjM4NyxEMzg1LEw2NzAsRDM3NCxSODk4LFU4NzAsTDU0NSxEMjYyLEw2OTksRDExMCxSNTgsRDg0LFI3NyxENTgsTDg5MSxVOSxSMzIwLEQ5MTQsTDE2MSxEMTQ4LEwyNjYsRDMzNCxSNDQyLEQ4NTUsUjM0OSxENjE4LFIyNzIsVTUxNCxSNTg0LEQyNjksUjYwOCxVNTQyLEwzMzUsVTg1NSxMNjQ2LEQ2NzgsUjcyMCxVMzI1LEw3OTIsVTYwLEw4MjgsRDkxNSxMNDg3LEQyNTMsTDkxMSxVOTA3LFIzOTIsRDk4MSxSOTY1LEQ3MjUsUjMwOCxENTc0LEw5OTcsRDMzMixMOTI3LEQ4NTUsUjEyMixENSxMODc1LEQzMzYsTDM5NSxVNjk3LFI4MDYsVTQyMCxSNzE4LEQ1NzUsTDgyNCxVMzk3LEwzMDgsRDk4OCxMODU1LFUzMzIsUjgzOCxVODUzLEw5MSxVNzc4LFIyNjUsVTU0OSxMODQ3LEQ2NjUsTDgwNCxENzY4LEw3MzYsRDIwMSxMODI1LFU4NyxMNzQ3LEQzNzUsTDE2MixVMzM2LFIzNzUsVTc1NCxSNDY4LFU1MDcsUjI1NixEMTA3LEw3OSxVODcxLEwxNTUsRDY2NyxMNDQ4LEQ4NDcsTDE5MyxVMjYzLFIxNTQsVTg1OSxSNjk2LEQyMjIsUjE4OSxEMzA3LFIzMzIsVTUyMixMMzQ1LEQ5NjEsTDE2MSxVMjc0LEwxMjIsVTkzMSxMODEyLEQ4NTIsUjkwNixEMjY5LFI2MTIsRDcyMyxMMzA0LFU5NDQsUjY0LEQyMCxSNDAxLEQyNjAsTDk1LFUyNzgsUjEyOCxVNjM3LEw1NTQsRDY1MCxMMTE2LEQ3MjAsUjEyLEQ0MzQsUjUxNCxVMzc5LEw4OTksRDM1OSxSODE1LEQ4NDMsTDk5NCxVNzc1LFI2MyxEOTQyLFI2NTUsRDkxLEwyMzYsVTE3NSxMODEzLEQ1NzIsUjUyMCxVODEyLEw2NTcsRDkzNSxMODg2LEQxNzgsUjYxOCxVMjYwLFI3LEQ5NTMsTDE1OCxENDcxLFIzMDksRDg1OCxSMjUsVTc0NixSNDAsVTgzMixMNTQ0LEQzMTEsUjEyMixEMjI0LEwyODEsRDY5OSxSMTQ3LEQzMTAsUjY1OSxENjYyLEw5OTAsVTE2MCxMOTY5LEQzMzUsTDkyMyxVMjAxLFIzMzYsRDY0MyxSMjI2LEQ5MSxSODgsVTM1MCxMMzAzLFUyMCxMMTU3LFU5ODcsTDMwNSxVNzY2LFIyNTMsRDc5MCxSOTc3LFU0ODIsUjI4MyxVNzkzLFI3ODUsRDc5OSxMNTExLEQ3NTcsTDY4OSxEODQxLEwyMzMsVTc0MixMNTUxLEQ0NjYsUjY2LFU1NzksTDE4LFU4MzgsUjU1NCxEMTQzLEw5OTYsVTU1NyxMNzgzLEQ3OTksUjM2LEQ1NjMsTDI0NCxVNDQwLEw4LEQ5NDUsTDM0NixENzQ3LEw3NjksVTY2MSxMNDg1LFU5NjUsTDU2OSxVOTUyLFI1NyxVNzczLEwyNjcsVTQ1MyxSNDI0LFU2NixSNzYzLFUxMDUsUjI4NSxEODcwLEwxNzksVTU0OCxMNDYsVTkxNCxMMjUxLFUxOTQsTDU1OSxVNzM2LFI3NjgsRDkxNyxSNjE3LEQ1NSxSMTg1LEQ0NjQsTDI0NFxuTDEwMDUsRDUyNyxSODY0LEQ2MjIsUjQ4MixENjQ3LFIyOSxVNDU5LFI0MzAsRDk0MixSNTUwLEQxNjMsTDg5OCxVODkwLEwyNzEsRDIxNixMNTIsVTczMSxSNzE1LFU5MjUsTDYxNCxVMTksUjY4NyxEODMyLEwzODEsVTE5MixMMjkzLEQ5NDYsTDY0MixEMixMMTI0LFU2NixSNDkyLFUyODEsUjE4MSxVNjI0LFIyOTQsVTc2NyxSNDQzLFU0MjQsUjI0MSxEMjI1LFI0MzIsRDQxOSxMNjQ3LFUyOTAsTDY0NyxEOTg1LEw2OTQsRDc3NyxMMzgyLEQyMzEsUjgwOSxENDY3LEw5MTcsRDIxNyxSNDIyLFU0OTAsTDg3MyxENTM3LFIxNzYsVTg1NixMOTQ0LEQ4NzUsTDQ4NSxENDksUjMzMyxEMjIwLEwzNTQsVTc4OSxSMjU2LEQ3MyxSOTA1LFUxNDYsUjc5OCxENDI5LFIxMTEsRDU4NSxMMjc1LEQ0NzEsUjIyMCxENjE5LEw2ODAsVTc1NyxSNTgwLFU0OTcsTDYyMCxVNzUzLFI1OCxVNTc0LEw4ODIsVTQ4NCxSMjk3LEQ4OTksTDk1LEQxODYsUjYxOSxENjIyLFI2NSxVNzE0LEw0MDIsVTk1MCxSNjQ3LEQ2MCxMNjU5LFUxMDEsTDkxNyxENzM2LEw1MzEsVTM5OCxSMjYsVTEzNCxSODM3LFUyOTQsUjM2NCxENTUsUjI1NCxEOTk5LFI4NjgsVTk3OCxSNDM0LFU2NjEsUjM2MixEMTU4LEw1MCxENTc2LEwxNDYsRDI0OSxMNTYyLEQ0MzMsUjIwNixEMzc2LEw2NTAsVTI4NSxMNDI3LEQ0MDYsTDUyNixENTk3LFI1NTcsVTU1NCxMNDYzLEQxNTcsTDgxMSxVOTYxLFI2NDgsRDE4NCxMOTYyLFU2OTUsUjEzOCxVNjYxLEw5OTksVTgwNixMNDEzLFU1NCxMODY1LFU5MzEsTDMxOSxVMjM1LEw3OTQsRDEyLEw0NTYsRDkxOCxMNDU2LFUyMTQsTDczOSxENzcyLFI5MCxENDc4LFIyMyxENjU4LFI5MTksRDk5MCxMMzA3LEQ1MzQsTDQwLEQzMjQsTDQsVTgwNSxMNjA1LFU1MzQsUjcyNyxVNDUyLFI3MzMsRDQxNixMNDUxLFU1OTgsUjIxNSxENTQ1LEw1NjMsRDIyMixMMjk1LEQ2NjksUjcwNixVMTEsUjQ0LEQzOTIsTDUxOCxENDM3LEw2MzQsVTg3NCxMNjQxLFUyNDAsTDExLEQyNzksTDE1MyxVNjAxLEwyMzgsVTkyNCxMMjkyLEQ0MDYsTDM2MCxEMjAzLFI4NzQsRDUwNixSODA2LFU5LFI3MTMsRDg5MSxMNTg3LFU1MzgsTDg2NyxENjM3LFI4ODksVTE4NixSNzI4LEQ2NzIsUjU3MyxVNDYxLFIyMjIsRDcwMyxSMTc4LFUzMzYsTDg5NixEOTI0LEw0NDUsRDM2NSxMNjQ4LFUzLEw3MzQsVTk1OSxSMzQ0LFUzMTQsUjMzMSxEOTI5LEwzNjQsRDkzNyxMODk2LEQxOTEsUjIxOCxVMjU2LEw5NzUsRDUwNixSNTEwLEQzOTIsUjg3OCxVODk2LEwxNzcsVTQsUjUxNixEODczLFI1NyxENTMwLFIxNDAsRDgyNyxMMjYzLFU4NDgsTDg4LFUzMDksTDgwMSxVNjcwLFI4NzQsRDM1OCxMNDksRDI1OSxMMTg4LFU0MTksUjcwNSxENDk4LFI0OTYsVTU3NixSODA4LEQ5NTksTDg2MSxVNDM3LEw2MTgsRDExMixSNzI1LEQ1NDYsUjMzOCxVODc5LFI1MjIsVTg5MixSMjMwLEQzNjcsUjkwMSxENzM3LEw5NDIsRDY4OSxSOTc2LEQzNjksUjE1NycsCiAgICAgICAgICAgaW50ZXJzZWN0aW9uczogW10sCiAgICAgICAgICAgc2Vjb25kU29sdXRpb246IDAKICAgICAgICB9CiAgICB9LAogICAgbWV0aG9kczogewogICAgICAgIAogICAgICAgICAgICAvLyBjb25zdCBpbnB1dCA9IHRoaXMuaW5wdXQKICAgICAgICAgICAgIHBhcnNlIChsaW5lKSB7CiAgICAgICAgICAgICAgICBjb25zdCBzZWdtZW50cyA9IFtdCiAgICAgICAgICAgICAgICBsZXQgcG9zaXRpb24gPSB7IHg6IDAsIHk6IDAgfQogICAgICAgICAgICAgICAgbGluZQogICAgICAgICAgICAgICAgICAgIC5zcGxpdChgLGApCiAgICAgICAgICAgICAgICAgICAgLm1hcCgodHVwbGUpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJyYXkgPSBbLi4udHVwbGVdCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxldHRlciA9IGFycmF5LnNoaWZ0KCkKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBwYXJzZUludChhcnJheS5qb2luYGApCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRQb3NpdGlvbiA9IHsgeDogcG9zaXRpb24ueCwgeTogcG9zaXRpb24ueSB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2gobGV0dGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnVSc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRQb3NpdGlvbi55IC09IGRpc3RhbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnRCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRQb3NpdGlvbi55ICs9IGRpc3RhbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUic6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRQb3NpdGlvbi54ICs9IGRpc3RhbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnTCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRQb3NpdGlvbi54IC09IGRpc3RhbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWdtZW50cy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHBvc2l0aW9uLngsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHBvc2l0aW9uLnkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IG5leHRQb3NpdGlvbi54LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBuZXh0UG9zaXRpb24ueQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSBuZXh0UG9zaXRpb24KICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWdtZW50cwogICAgICAgICAgICB9LAogICAgICAgICAgICAvLyBkaXN0YW5jZXMgKGludGVyc2VjdGlvbnMpIHsKICAgICAgICAgICAgLy8gICAgIGxldCBkaXN0YW5jZXMgPSBpbnRlcnNlY3Rpb25zCiAgICAgICAgICAgIC8vICAgICAgICAgLmZpbHRlcihwID0+IHAueCAhPSAwIHx8IHAueSAhPSAwKQogICAgICAgICAgICAvLyAgICAgICAgIC5tYXAocCA9PiBNYXRoLmFicyhwLngpICsgTWF0aC5hYnMocC55KSkKICAgICAgICAgICAgLy8gICAgIHJldHVybiBNYXRoLm1pbiguLi5kaXN0YW5jZXMpCiAgICAgICAgICAgIC8vIH0sCiAgICAgICAgICAgIHNvbHZlIChpbnB1dCkgewogICAgICAgICAgICAgICAgY29uc3Qgd2lyZXMgPSBpbnB1dC5zcGxpdChgXG5gKS5tYXAod2lyZSA9PiB0aGlzLnBhcnNlKHdpcmUpKQogICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkod2lyZXMpKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBsZXQgaW50ZXJzZWN0aW9ucyA9IFtdCiAgICAgICAgICAgICAgICBsZXQgY3VycmVudFN0ZXBzMSA9IDAKICAgICAgICAgICAgICAgIGNvbnN0IG1hbmhhdHRhbiA9IChwb2ludDEsIHBvaW50MikgPT4gTWF0aC5hYnMocG9pbnQxLnggLSBwb2ludDIueCkgKyBNYXRoLmFicyhwb2ludDEueSAtIHBvaW50Mi55KQoKICAgICAgICAgICAgICAgIHdpcmVzWzBdLm1hcCgoc2VnbWVudDEpID0+IHsKICAgICAgICAgICAgICAgICAgICBsZXQgY3VycmVudFN0ZXBzMiA9IDAKICAgICAgICAgICAgICAgICAgICB3aXJlc1sxXS5tYXAoKHNlZ21lbnQyKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKChzZWdtZW50MS5mcm9tLnggPT0gc2VnbWVudDEudG8ueCkgXiAoc2VnbWVudDIuZnJvbS54ID09IHNlZ21lbnQyLnRvLngpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2ZXJ0aWNhbCA9IHNlZ21lbnQxLmZyb20ueCA9PSBzZWdtZW50MS50by54ID8gc2VnbWVudDEgOiBzZWdtZW50MgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaG9yaXpvbnRhbCA9IHNlZ21lbnQxLmZyb20ueCA9PSBzZWdtZW50MS50by54ID8gc2VnbWVudDIgOiBzZWdtZW50MQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1pblggPSBNYXRoLm1pbihob3Jpem9udGFsLmZyb20ueCwgaG9yaXpvbnRhbC50by54KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF4WCA9IE1hdGgubWF4KGhvcml6b250YWwuZnJvbS54LCBob3Jpem9udGFsLnRvLngpCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWluWSA9IE1hdGgubWluKHZlcnRpY2FsLmZyb20ueSwgdmVydGljYWwudG8ueSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1heFkgPSBNYXRoLm1heCh2ZXJ0aWNhbC5mcm9tLnksIHZlcnRpY2FsLnRvLnkpCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodmVydGljYWwuZnJvbS54ID49IG1pblggJiYgdmVydGljYWwuZnJvbS54IDw9IG1heFgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBob3Jpem9udGFsLmZyb20ueSA+PSBtaW5ZICYmIGhvcml6b250YWwuZnJvbS55IDw9IG1heFkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiB2ZXJ0aWNhbC5mcm9tLngsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IGhvcml6b250YWwuZnJvbS55LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGVwczogY3VycmVudFN0ZXBzMSArIGN1cnJlbnRTdGVwczIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc3RlcHMgKz0gbWFuaGF0dGFuKHNlZ21lbnQxLmZyb20sIGkpICsgbWFuaGF0dGFuKHNlZ21lbnQyLmZyb20sIGkpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvbnMucHVzaChpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdGVwczIgKz0gbWFuaGF0dGFuKHNlZ21lbnQyLmZyb20sIHNlZ21lbnQyLnRvKQogICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhjdXJyZW50U3RlcHMyKQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgY3VycmVudFN0ZXBzMSArPSBtYW5oYXR0YW4oc2VnbWVudDEuZnJvbSwgc2VnbWVudDEudG8pCiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coY3VycmVudFN0ZXBzMSkKICAgICAgICAgICAgICAgICAgICBsZXQgZGlzdGFuY2VzID0gaW50ZXJzZWN0aW9ucwogICAgICAgICAgICAgICAgICAgIC5maWx0ZXIocCA9PiBwLnggIT0gMCB8fCBwLnkgIT0gMCkKICAgICAgICAgICAgICAgICAgICAubWFwKHAgPT4gcC5zdGVwcykKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWluKC4uLmRpc3RhbmNlcykgJiYgKHRoaXMuc2Vjb25kU29sdXRpb24gPSBNYXRoLm1pbiguLi5kaXN0YW5jZXMpKQogICAgICAgICAgICAgICAgfSk7IAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIH0KICAgICAgICAKICAgIH0sCiAgICBtb3VudGVkICgpIHsKICAgICAgICAvLyAgICBjb25zb2xlLmxvZygnVGhpcyBpcyB0aGUgYW5zd2VyJywgdGhpcy5zb2x2ZSh0aGlzLmlucHV0KSkKICAgICAgICAgICB0aGlzLnNvbHV0aW9uID0gdGhpcy5zb2x2ZSh0aGlzLmlucHV0KSAKICAgICAgICAgIAoKICAgICAgICB9Cn0K"},{"version":3,"sources":["Daythree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA","file":"Daythree.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div>\n        <h1>--- Day 3: Crossed Wires ---</h1>\n        <p>\n            The gravity assist was successful, and you're well on your way to the Venus refuelling station. \n            During the rush back on Earth, the fuel management system wasn't completely installed, so that's \n            next on the priority list.\n        </p>\n        <p>\n            Opening the front panel reveals a jumble of wires. Specifically, two wires are connected to a \n            central port and extend outward on a grid. You trace the path each wire takes as it leaves the \n            central port, one wire per line of text (your puzzle input).\n        </p>\n        <p>\n            The wires twist and turn, but the two wires occasionally cross paths. To fix the circuit, you \n            need to find the intersection point closest to the central port. Because the wires are on a \n            grid, use the Manhattan distance for this measurement. While the wires do technically cross \n            right at the central port where they both start, this point does not count, nor does a wire \n            count as crossing with itself.\n        </p>\n        <p>\n            For example, if the first wire's path is R8,U5,L5,D3, then starting from the central port (o), \n            it goes right 8, up 5, left 5, and finally down 3:\n        </p>\n        <img src=\"https://i.imgur.com/hwnCbRF.png\" alt=\"fristimg\">\n        <p>\n            Then, if the second wire's path is U7,R6,D4,L4, it goes up 7, right 6, down 4, and left 4:\n        </p>\n        <img src=\"https://i.imgur.com/s7Zl8ZM.png\" alt=\"scndimg\">\n        <p>\n            These wires cross at two locations (marked X), but the lower-left one is closer to the central \n            port: its distance is 3 + 3 = 6.\n        </p>\n        <h3>\n            Here are a few more examples:\n        </h3>\n        <p>\n            <ul >\n                <li>\n                        R75,D30,R83,U83,L12,D49,R71,U7,L72\n                        U62,R66,U55,R34,D71,R55,D58,R83 = distance 159\n                </li>\n                <li>\n                        R98,U47,R26,D63,R33,U87,L62,D20,R33,U53,R51\n                        U98,R91,D20,R16,D67,R40,U7,R15,U6,R7 = distance 135\n                </li>\n            </ul>\n        </p>\n        <h3>\n            What is the Manhattan distance from the central port to the closest intersection?\n        </h3>\n        <h1>Solution(<a href=\"https://adventofcode.com/2019/day/3/input\">input</a>): {{ solution }}</h1>\n        <br>\n        <h1>--- Part Two ---</h1>\n        <p>\n            It turns out that this circuit is very timing-sensitive; you actually need to minimize the \n            signal delay.\n        </p>\n        <p>\n            To do this, calculate the number of steps each wire takes to reach each intersection; \n            choose the intersection where the sum of both wires' steps is lowest. If a wire visits a \n            position on the grid multiple times, use the steps value from the first time it visits that \n            position when calculating the total value of a specific intersection.\n        </p>\n        <p>\n            The number of steps a wire takes is the total number of grid squares the wire has entered to \n            get to that location, including the intersection being considered. Again consider the example \n            from above:\n        </p>\n        <img src=\"\" alt=\"\">\n        <h1>{{ secondSolution }}</h1>\n    </div>\n</template>\n\n<script>\nexport default {\n    data: function () {\n        return {\n           solution: 0,\n           input: 'R1004,D53,L10,U126,R130,U533,R48,D185,L768,U786,L445,U694,L659,D237,R432,U147,R590,U200,R878,D970,L308,D134,R617,U431,L631,D548,L300,D509,R660,U698,L958,U170,R572,U514,R387,D385,L670,D374,R898,U870,L545,D262,L699,D110,R58,D84,R77,D58,L891,U9,R320,D914,L161,D148,L266,D334,R442,D855,R349,D618,R272,U514,R584,D269,R608,U542,L335,U855,L646,D678,R720,U325,L792,U60,L828,D915,L487,D253,L911,U907,R392,D981,R965,D725,R308,D574,L997,D332,L927,D855,R122,D5,L875,D336,L395,U697,R806,U420,R718,D575,L824,U397,L308,D988,L855,U332,R838,U853,L91,U778,R265,U549,L847,D665,L804,D768,L736,D201,L825,U87,L747,D375,L162,U336,R375,U754,R468,U507,R256,D107,L79,U871,L155,D667,L448,D847,L193,U263,R154,U859,R696,D222,R189,D307,R332,U522,L345,D961,L161,U274,L122,U931,L812,D852,R906,D269,R612,D723,L304,U944,R64,D20,R401,D260,L95,U278,R128,U637,L554,D650,L116,D720,R12,D434,R514,U379,L899,D359,R815,D843,L994,U775,R63,D942,R655,D91,L236,U175,L813,D572,R520,U812,L657,D935,L886,D178,R618,U260,R7,D953,L158,D471,R309,D858,R25,U746,R40,U832,L544,D311,R122,D224,L281,D699,R147,D310,R659,D662,L990,U160,L969,D335,L923,U201,R336,D643,R226,D91,R88,U350,L303,U20,L157,U987,L305,U766,R253,D790,R977,U482,R283,U793,R785,D799,L511,D757,L689,D841,L233,U742,L551,D466,R66,U579,L18,U838,R554,D143,L996,U557,L783,D799,R36,D563,L244,U440,L8,D945,L346,D747,L769,U661,L485,U965,L569,U952,R57,U773,L267,U453,R424,U66,R763,U105,R285,D870,L179,U548,L46,U914,L251,U194,L559,U736,R768,D917,R617,D55,R185,D464,L244\\nL1005,D527,R864,D622,R482,D647,R29,U459,R430,D942,R550,D163,L898,U890,L271,D216,L52,U731,R715,U925,L614,U19,R687,D832,L381,U192,L293,D946,L642,D2,L124,U66,R492,U281,R181,U624,R294,U767,R443,U424,R241,D225,R432,D419,L647,U290,L647,D985,L694,D777,L382,D231,R809,D467,L917,D217,R422,U490,L873,D537,R176,U856,L944,D875,L485,D49,R333,D220,L354,U789,R256,D73,R905,U146,R798,D429,R111,D585,L275,D471,R220,D619,L680,U757,R580,U497,L620,U753,R58,U574,L882,U484,R297,D899,L95,D186,R619,D622,R65,U714,L402,U950,R647,D60,L659,U101,L917,D736,L531,U398,R26,U134,R837,U294,R364,D55,R254,D999,R868,U978,R434,U661,R362,D158,L50,D576,L146,D249,L562,D433,R206,D376,L650,U285,L427,D406,L526,D597,R557,U554,L463,D157,L811,U961,R648,D184,L962,U695,R138,U661,L999,U806,L413,U54,L865,U931,L319,U235,L794,D12,L456,D918,L456,U214,L739,D772,R90,D478,R23,D658,R919,D990,L307,D534,L40,D324,L4,U805,L605,U534,R727,U452,R733,D416,L451,U598,R215,D545,L563,D222,L295,D669,R706,U11,R44,D392,L518,D437,L634,U874,L641,U240,L11,D279,L153,U601,L238,U924,L292,D406,L360,D203,R874,D506,R806,U9,R713,D891,L587,U538,L867,D637,R889,U186,R728,D672,R573,U461,R222,D703,R178,U336,L896,D924,L445,D365,L648,U3,L734,U959,R344,U314,R331,D929,L364,D937,L896,D191,R218,U256,L975,D506,R510,D392,R878,U896,L177,U4,R516,D873,R57,D530,R140,D827,L263,U848,L88,U309,L801,U670,R874,D358,L49,D259,L188,U419,R705,D498,R496,U576,R808,D959,L861,U437,L618,D112,R725,D546,R338,U879,R522,U892,R230,D367,R901,D737,L942,D689,R976,D369,R157',\n           intersections: [],\n           secondSolution: 0\n        }\n    },\n    methods: {\n        \n            // const input = this.input\n             parse (line) {\n                const segments = []\n                let position = { x: 0, y: 0 }\n                line\n                    .split(`,`)\n                    .map((tuple) => {\n                        const array = [...tuple]\n                        const letter = array.shift()\n                        const distance = parseInt(array.join``)\n                        const nextPosition = { x: position.x, y: position.y }\n                            switch(letter) {\n                                case 'U':\n                                    nextPosition.y -= distance\n                                    break\n                                case 'D':\n                                    nextPosition.y += distance\n                                    break\n                                case 'R':\n                                    nextPosition.x += distance\n                                    break\n                                case 'L':\n                                    nextPosition.x -= distance\n                                    break\n                            }\n                            segments.push({\n                                from: {\n                                    x: position.x,\n                                    y: position.y\n                                },\n                                to: {\n                                    x: nextPosition.x,\n                                    y: nextPosition.y\n                                },\n                            })\n                            position = nextPosition\n                    })\n                    return segments\n            },\n            // distances (intersections) {\n            //     let distances = intersections\n            //         .filter(p => p.x != 0 || p.y != 0)\n            //         .map(p => Math.abs(p.x) + Math.abs(p.y))\n            //     return Math.min(...distances)\n            // },\n            solve (input) {\n                const wires = input.split(`\\n`).map(wire => this.parse(wire))\n                // console.log(JSON.stringify(wires))\n                \n                let intersections = []\n                let currentSteps1 = 0\n                const manhattan = (point1, point2) => Math.abs(point1.x - point2.x) + Math.abs(point1.y - point2.y)\n\n                wires[0].map((segment1) => {\n                    let currentSteps2 = 0\n                    wires[1].map((segment2) => {\n                        if((segment1.from.x == segment1.to.x) ^ (segment2.from.x == segment2.to.x)) {\n                            const vertical = segment1.from.x == segment1.to.x ? segment1 : segment2\n                            const horizontal = segment1.from.x == segment1.to.x ? segment2 : segment1\n\n                            const minX = Math.min(horizontal.from.x, horizontal.to.x)\n                            const maxX = Math.max(horizontal.from.x, horizontal.to.x)\n\n                            const minY = Math.min(vertical.from.y, vertical.to.y)\n                            const maxY = Math.max(vertical.from.y, vertical.to.y)\n\n                            if(vertical.from.x >= minX && vertical.from.x <= maxX\n                                && horizontal.from.y >= minY && horizontal.from.y <= maxY) {\n                                const i = {\n                                    x: vertical.from.x,\n                                    y: horizontal.from.y,\n                                    steps: currentSteps1 + currentSteps2\n                                };\n                                i.steps += manhattan(segment1.from, i) + manhattan(segment2.from, i) \n                                intersections.push(i)\n                            }\n                        }\n                        currentSteps2 += manhattan(segment2.from, segment2.to)\n                        // console.log(currentSteps2)\n                    })\n                    currentSteps1 += manhattan(segment1.from, segment1.to)\n                    // console.log(currentSteps1)\n                    let distances = intersections\n                    .filter(p => p.x != 0 || p.y != 0)\n                    .map(p => p.steps)\n                        return Math.min(...distances) && (this.secondSolution = Math.min(...distances))\n                }); \n                \n            }\n        \n    },\n    mounted () {\n        //    console.log('This is the answer', this.solve(this.input))\n           this.solution = this.solve(this.input) \n          \n\n        }\n}\n</script>\n\n<style scoped>\n\n</style>"]}]}