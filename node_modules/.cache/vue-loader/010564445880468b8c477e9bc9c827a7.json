{"remainingRequest":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/src/views/Dayfour.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/src/views/Dayfour.vue","mtime":1576801711949},{"path":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/cache-loader/dist/cjs.js","mtime":1572726259477},{"path":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/babel-loader/lib/index.js","mtime":1558734726536},{"path":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/cache-loader/dist/cjs.js","mtime":1572726259477},{"path":"/Users/anestisfinstad/Desktop/Advent-of-Code/adventofcode/node_modules/vue-loader/lib/index.js","mtime":1572726259852}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICAgIGRhdGE6IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBzb2x1dGlvbjogMAogICAgICAgIH0KICAgIH0sCiAgICBtZXRob2RzOiB7CiAgICAgICAgY3JhY2tWZW51c0NvZGUgKCkgewogICAgICAgICAgICBjb25zdCBtYXRjaGluZyA9IFtdOwoKICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE1ODEyNjsgaSA8PSA2MjQ1NzQ7IGkrKykgewogICAgICAgICAgICBjb25zdCBzdHJpbmdOdW0gPSBTdHJpbmcoaSk7CiAgICAgICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICAgICAgICBsZXQgaXNJbmNyZWFzaW5nID0gZmFsc2U7CiAgICAgICAgICAgIC8vIGxldCBjb250YWluc0RvdWJsZSA9IGZhbHNlOwogICAgICAgICAgICBsZXQgY29udGFpbnNUcmlwbGUgPSB0cnVlCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc3RyaW5nTnVtLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgICAgICBpZiAoaiA+IDApIHsKICAgICAgICAgICAgICAgIC8vIENoZWNrcyBpZiBpbmNyZWFzaW5nCiAgICAgICAgICAgICAgICBpZiAoc3RyaW5nTnVtW2ogLSAxXSA8PSBzdHJpbmdOdW1bal0pIHsKICAgICAgICAgICAgICAgICAgICBpc0luY3JlYXNpbmcgPSB0cnVlOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpc0luY3JlYXNpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICBicmVhazsgCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBJZiBhIHBhaXIgYW5kIG5vdCBwYXJ0IG9mIHRocmVlIGluIGEgcm93IGJ1dCB0aHJlZSBpbiBhIHJvdyBpcyBzdGlsbCBvayBpZiB0aGVyZSBpcyBhIHBhaXIKICAgICAgICAgICAgICAgIGlmIChzdHJpbmdOdW1bal0gPT09IHN0cmluZ051bVtqICsgMV0gJiYgc3RyaW5nTnVtW2pdID09PSBzdHJpbmdOdW1baiArIDJdKQogICAgICAgICAgICAgICAgICAgIGNvbnRhaW5zVHJpcGxlID0gZmFsc2UKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgLy8gVFJJRUQ6IDE2MDkgMTIzMiA5MDIgOTgxIDE3MyAwIDcxMCAxNDczIDE0MTcgODgwIDk2NCAxNDYyIDExMDIgNzkxIAogICAgICAgICAgICAgICAgLy8gU29sdXRpb25zIGZvcm0gb3RoZXJzOiAxNDYyIDExMDIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICAgICAgaWYgKGlzSW5jcmVhc2luZyAmJiBjb250YWluc1RyaXBsZSkgewogICAgICAgICAgICAgICAgbWF0Y2hpbmcucHVzaChpKQogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuc29sdXRpb24gPSBtYXRjaGluZy5sZW5ndGgKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc29sZS5sb2cobWF0Y2hpbmcubGVuZ3RoKTsKCiAgICAgICAgfSwKICAgICAgICBwb3NzaWJsZVNvbHV0aW9uKCkgewogICAgICAgICAgICBjb25zdCBkYXk0ID0gIjE5MzY1MS02MjQ1NzQiOwoKICAgICAgICAgICAgY29uc3QgcGFzc0NvdW50ID0gKHN0cikgPT4gewogICAgICAgICAgICBsZXQgYSA9IHN0ci5zcGxpdCgiLSIpWzBdOwogICAgICAgICAgICBsZXQgYiA9IHN0ci5zcGxpdCgiLSIpWzFdOwogICAgICAgICAgICBsZXQgY291bnQgPSAwOwogICAgICAgICAgICBsZXQgaSA9IGEudG9TdHJpbmcoKTsKICAgICAgICAgICAgbGV0IGo7CiAgICAgICAgICAgIGxldCBrOwogICAgICAgICAgICB3aGlsZSAoaSA8IGIpIHsKICAgICAgICAgICAgICAgIGogPSAxOwogICAgICAgICAgICAgICAgd2hpbGUgKGogPCBpLmxlbmd0aCkgewogICAgICAgICAgICAgICAgayA9IDE7CiAgICAgICAgICAgICAgICBpZiAoaVtqXSA8IGlbai0xXSkgewogICAgICAgICAgICAgICAgICAgIGxldCBuZXh0TnVtID0gaS5zdWJzdHIoMCxqKS5jb25jYXQoaVtqLTFdLnJlcGVhdChpLmxlbmd0aC1qKSk7CiAgICAgICAgICAgICAgICAgICAgaSA9IG5leHROdW07CiAgICAgICAgICAgICAgICAgICAgaiA9IGkubGVuZ3RoOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChqID09IGkubGVuZ3RoLTEpIHsKICAgICAgICAgICAgICAgICAgICB3aGlsZSAoayA8IGkubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGlba10gPT0gaVtrLTFdICYmIGlba10gIT0gaVtrKzFdICYmIGlba10gIT0gaVtrLTJdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50Kys7CiAgICAgICAgICAgICAgICAgICAgICAgIGsgPSBpLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBrKys7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpID0gKHBhcnNlSW50KGkpICsgMSkudG9TdHJpbmcoKTsKICAgICAgICAgICAgICAgICAgICBqKys7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGorKzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gY291bnQgJiYgY29uc29sZS5sb2coY291bnQpOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgcGFzc0NvdW50KGRheTQpOwogICAgICAgIH0KICAgIH0sCiAgICBtb3VudGVkICgpIHsKICAgICAgICB0aGlzLmNyYWNrVmVudXNDb2RlKCkKICAgICAgICB0aGlzLnBvc3NpYmxlU29sdXRpb24oKQogICAgfQp9Cg=="},{"version":3,"sources":["Dayfour.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Dayfour.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div>\n        <h1>--- Day 4: Secure Container ---</h1>\n        <p>\n            You arrive at the Venus fuel depot only to discover it's protected by a password. \n            The Elves had written the password on a sticky note, but someone threw it out.\n        </p>\n        <h4 >However, they do remember a few key facts about the password:</h4>\n        <ul class=\"textDeco\">\n            <li>\n                It is a six-digit number.\n            </li>\n            <li>\n                The value is within the range given in your puzzle input.\n            </li>\n            <li>\n                Two adjacent digits are the same (like 22 in 122345).\n            </li>\n            <li>\n                Going from left to right, the digits never decrease; they only ever,\n                increase or stay the same (like 111123 or 135679).\n            </li>\n        </ul>\n        <p>\n            Other than the range rule, the following are true:\n        </p>\n        <ul class=\"textDeco\" >\n            <li>\n                111111 meets these criteria (double 11, never decreases).\n            </li>\n            <li>\n                223450 does not meet these criteria (decreasing pair of digits 50).\n            </li>\n            <li>\n                123789 does not meet these criteria (no double).\n            </li>\n        </ul>\n        <h3>\n            How many different passwords within the range given in your puzzle input meet these criteria?\n        </h3>\n        <h4>Your puzzle answer was 1665.</h4>\n        <br>\n        <h1>--- Part Two ---</h1>\n        <p>\n            An Elf just remembered one more important detail: the two adjacent matching digits are not \n            part of a larger group of matching digits.\n        </p>\n        <p>\n            An Elf just remembered one more important detail: the two adjacent matching digits are not \n            part of a larger group of matching digits.\n        </p>\n        <p>\n            Given this additional criterion, but still ignoring the range rule, the following are now true:\n        </p>\n        <ul class=\"textDeco\">\n            <li>\n                112233 meets these criteria because the digits never decrease and all repeated digits are exactly two digits long.\n            </li>\n            <li>\n                123444 no longer meets the criteria (the repeated 44 is part of a larger group of 444).\n            </li>\n        </ul>\n        <h2>How many different passwords within the range given in your puzzle input meet all of the criteria?</h2>\n        <h2> {{ solution }} </h2>\n    </div>\n</template>\n\n<script>\n    export default {\n        data: function () {\n            return {\n                solution: 0\n            }\n        },\n        methods: {\n            crackVenusCode () {\n                const matching = [];\n\n                for (let i = 158126; i <= 624574; i++) {\n                const stringNum = String(i);\n                //-------------------------------------------\n                let isIncreasing = false;\n                // let containsDouble = false;\n                let containsTriple = true\n                \n                \n                //-------------------------------------------\n                for (let j = 0; j < stringNum.length; j++) {\n                    if (j > 0) {\n                    // Checks if increasing\n                    if (stringNum[j - 1] <= stringNum[j]) {\n                        isIncreasing = true;\n                    } else {\n                        isIncreasing = false;\n                        break; \n                    }\n                    // If a pair and not part of three in a row but three in a row is still ok if there is a pair\n                    if (stringNum[j] === stringNum[j + 1] && stringNum[j] === stringNum[j + 2])\n                        containsTriple = false\n                    \n                    // TRIED: 1609 1232 902 981 173 0 710 1473 1417 880 964 1462 1102 791 \n                    // Solutions form others: 1462 1102\n                    }\n                }\n                \n                //------------------------------------------\n                if (isIncreasing && containsTriple) {\n                    matching.push(i)\n                }\n                this.solution = matching.length\n                }\n\n                console.log(matching.length);\n\n            },\n            possibleSolution() {\n                const day4 = \"193651-624574\";\n\n                const passCount = (str) => {\n                let a = str.split(\"-\")[0];\n                let b = str.split(\"-\")[1];\n                let count = 0;\n                let i = a.toString();\n                let j;\n                let k;\n                while (i < b) {\n                    j = 1;\n                    while (j < i.length) {\n                    k = 1;\n                    if (i[j] < i[j-1]) {\n                        let nextNum = i.substr(0,j).concat(i[j-1].repeat(i.length-j));\n                        i = nextNum;\n                        j = i.length;\n                    } else if (j == i.length-1) {\n                        while (k < i.length) {\n                        if (i[k] == i[k-1] && i[k] != i[k+1] && i[k] != i[k-2]) {\n                            count++;\n                            k = i.length;\n                        } else {\n                            k++;\n                        }\n                        }\n                        i = (parseInt(i) + 1).toString();\n                        j++;\n                    } else {\n                        j++;\n                    }\n                    }\n                }\n                return count && console.log(count);\n                };\n\n                passCount(day4);\n            }\n        },\n        mounted () {\n            this.crackVenusCode()\n            this.possibleSolution()\n        }\n    }\n</script>\n\n<style scoped>\n.textDeco {\n    list-style-type: none;\n}\n</style>"]}]}